@page "/checking"
@layout ManagerMasterPage

<div class="container-fluid mt-4">

    <!-- Filter component -->
    <CheckingFilter Employees="Employees" @bind-SelectedEmployeeName="SelectedEmployeeName"
        @bind-SelectedDate="SelectedDate" ShowActiveOnly="@ShowActiveOnly" OnFilterChanged="HandleFilterChanged" />



    <!-- Table component -->
    @if (!string.IsNullOrEmpty(SelectedEmployeeName) && SelectedDate != default)
    {
        <CheckingTable Projects="FilteredProjects" WeekDays="WeekDays" />
    }
    else
    {
        <div class="alert alert-info">
            Please select an <b>Employee</b> and a <b>Date</b> to view the timesheet.
        </div>
    }
</div>

@code {
    private List<EmployeeModel> Employees = new()
{
new EmployeeModel("Trịnh Hữu Gia Bảo", "Phòng IT", "HUFLIT", "Lập trình C#", DateTime.Now.AddMonths(-2),
DateTime.Now.AddMonths(1), "C#, SQL, Blazor", true),
new EmployeeModel("Nguyễn Đức Huy", "Phòng Data", "IUH", "Data Science", DateTime.Now.AddMonths(-3),
DateTime.Now.AddMonths(2), "Python, ML", true),
new EmployeeModel("Ka Nghiêm", "Phòng Mobile", "UIT", "Flutter Dev", DateTime.Now.AddMonths(-1),
DateTime.Now.AddMonths(4), "Flutter, Dart, Firebase", false),
};

    private List<ProjectModel> Projects = new()
{
new ProjectModel("INTERN_LEAVE", "Intern Leave", "Pending", "Leave", 10, DateTime.Now.AddMonths(-2),
DateTime.Now.AddMonths(2), true, "Leave request for interns"),
new ProjectModel("SICK_LEAVE", "Sick Leave", "Approved", "Leave", 5, DateTime.Now.AddMonths(-1),
DateTime.Now.AddMonths(1), false, "Sick leave records"),
new ProjectModel("CYBERSOFT_OT", "CyberSoft OT", "Open", "Overtime", 20, DateTime.Now.AddMonths(-3),
DateTime.Now.AddMonths(3), true, "Overtime projects"),
new ProjectModel("CYBERSOFT_INTERN", "CyberSoft Intern", "In Progress", "Internship", 50, DateTime.Now.AddMonths(-6),
DateTime.Now.AddMonths(6), true, "Internship project"),
new ProjectModel("DEV_REMOTE", "Remote Dev", "Completed", "Remote Work", 15, DateTime.Now.AddMonths(-4),
DateTime.Now.AddMonths(-1), false, "Remote dev tasks"),
};

    private string SelectedEmployeeName = ""; // chỉ lưu tên
    private DateTime SelectedDate = DateTime.Today;
    private bool ShowActiveOnly = false;

    private EmployeeModel? SelectedEmployee =>
    Employees.FirstOrDefault(e => e.FullName == SelectedEmployeeName);

    private List<ProjectModel> FilteredProjects =>
    Projects.Where(p => !ShowActiveOnly || p.IsActive).ToList();

    private List<DateTime> WeekDays
    {
        get
        {
            var monday = SelectedDate.AddDays(-(int)SelectedDate.DayOfWeek + (SelectedDate.DayOfWeek == DayOfWeek.Sunday ? -6 : 1));
            return Enumerable.Range(0, 7).Select(i => monday.AddDays(i)).ToList();
        }
    }


    private void HandleFilterChanged(bool activeOnly)
    {
        ShowActiveOnly = activeOnly;
    }
}
